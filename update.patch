diff --git a/backend/src/main/java/com/example/backend/Teams/TeamController.java b/backend/src/main/java/com/example/backend/Teams/TeamController.java
index 5c6f7c9..1c2f4cf 100644
--- a/backend/src/main/java/com/example/backend/Teams/TeamController.java
+++ b/backend/src/main/java/com/example/backend/Teams/TeamController.java
@@ -94,4 +94,63 @@ public class TeamController {
         }
     }
 
+    @GetMapping("/overall_match_history/{team1_id}/{team2_id}")
+    public ResponseEntity<String> getOverallMatchHistory(@PathVariable String team1_id, @PathVariable String team2_id)  {
+        try {
+            Connection connection = DriverManager.getConnection(Constants.url, Constants.username, Constants.password);
+            String readMessageQuery = "SELECT SUM(team1_win) AS numTeam1Win, SUM(team2_win) AS numTeam2Win, SUM(TIE) AS numTies " +
+                                        "FROM (" +
+                                        "SELECT home_team_score > away_team_score AS team1_win, " +
+                                                "home_team_score < away_team_score AS team2_win, " +
+                                                "home_team_score = away_team_score AS TIE " +
+                                        "FROM footyfiend.MatchesPlayed NATURAL JOIN footyfiend.Matches " +
+                                        "WHERE (home_team_id = " + team1_id + " AND away_team_id = " + team2_id + ") " +
+                                        "UNION ALL " +
+                                        "SELECT away_team_score > home_team_score AS team1_win, " +
+                                                "away_team_score < home_team_score AS team2_win, " +
+                                                "home_team_score = away_team_score AS TIE " +
+                                        "FROM footyfiend.MatchesPlayed NATURAL JOIN footyfiend.Matches " +
+                                        "WHERE (home_team_id = " + team2_id + " AND away_team_id = " +  team1_id + ")) AS T;";
+
+
+            Statement statement = connection.createStatement();
+            ResultSet resultSet = statement.executeQuery(readMessageQuery);
+            JSONArray res = Util.resultToJsonArray(resultSet, connection);
+
+            return ResponseEntity.ok(res.toString());
+        } catch (SQLException e) {
+            e.printStackTrace();
+            return ResponseEntity.badRequest().body(String.format("Unable to parse JSON: %s", e));
+        }
+    }
+
+    @GetMapping("/last_five_matches/{team1_id}/{team2_id}")
+    public ResponseEntity<String> getLastFiveMatches(@PathVariable String team1_id, @PathVariable String team2_id) {
+        try {
+            Connection connection = DriverManager.getConnection(Constants.url, Constants.username, Constants.password);
+            String readMessageQuery = "SELECT * " +
+                            "FROM ( " +
+                                    "SELECT home_team_id as team1_id, away_team_id as team2_id, home_team_score AS team1_score, away_team_score AS team2_score, season " +
+                                    "FROM footyfiend.MatchesPlayed NATURAL JOIN footyfiend.Matches " +
+                                    "WHERE (home_team_id = " + team1_id +" AND away_team_id = " + team2_id + ") " +
+                                    "UNION ALL " +
+                                    "SELECT away_team_id as team1_id, home_team_id as team2_id, away_team_score AS team1_score, home_team_score AS team2_score, season " +
+                                    "FROM footyfiend.MatchesPlayed NATURAL JOIN footyfiend.Matches " +
+                                    "WHERE (home_team_id = " + team2_id +" AND away_team_id = " + team1_id + ") " +
+                            ") AS T " +
+                            "ORDER BY SEASON DESC " +
+                            "LIMIT 5;";
+
+
+            Statement statement = connection.createStatement();
+            ResultSet resultSet = statement.executeQuery(readMessageQuery);
+            JSONArray res = Util.resultToJsonArray(resultSet, connection);
+
+            return ResponseEntity.ok(res.toString());
+        } catch (SQLException e) {
+            e.printStackTrace();
+            return ResponseEntity.badRequest().body(String.format("Unable to parse JSON: %s", e));
+        }
+    }
+
 }
diff --git a/frontend/src/App.tsx b/frontend/src/App.tsx
index d2cf2a5..6f7f16b 100644
--- a/frontend/src/App.tsx
+++ b/frontend/src/App.tsx
@@ -11,6 +11,7 @@ import { UserContext } from "./contexts/userContext";
 import TeamList from "./pages/TeamList";
 import Team from "./pages/Team";
 import CompareUserTeams from "./pages/CompareUserTeams"
+import MatchHistory from "./pages/MatchHistory"
 import Roster from "./pages/Roster";
 import LeagueList from "./pages/LeagueList";
 
@@ -50,6 +51,14 @@ const App: React.FC = () => {
           </RequireAuth>
         }
       ></Route>
+      <Route
+        path="/matchHistory"
+        element={
+          <RequireAuth>
+            <MatchHistory />
+          </RequireAuth>
+        }
+      ></Route>
       <Route
         path="/roster/:teamId"
         element={
diff --git a/frontend/src/components/Navbar.tsx b/frontend/src/components/Navbar.tsx
index 528b408..0f671ad 100644
--- a/frontend/src/components/Navbar.tsx
+++ b/frontend/src/components/Navbar.tsx
@@ -38,6 +38,12 @@ const Navbar: React.FC = () => {
         >
           Teams
         </Link>
+        <Link
+          href="/matchHistory"
+          fontWeight={location.pathname == "/matchHistory" ? 700 : 400}
+        >
+          Match History
+        </Link>
         <Link
           href="/myTeams"
           fontWeight={location.pathname == "/myTeams" ? 700 : 400}
diff --git a/frontend/src/hooks/useFilterSearch.ts b/frontend/src/hooks/useFilterSearch.ts
index 466a16f..bb72e87 100644
--- a/frontend/src/hooks/useFilterSearch.ts
+++ b/frontend/src/hooks/useFilterSearch.ts
@@ -43,6 +43,12 @@ export const useFilterSearch = () => {
     setNumPlayers(Number(num[0].playerCount));
   };
 
+  const resetSearchResults = () => {
+    setTeamResults([]);
+    setPlayerResults([]);
+    setLeagueResults([]);
+  }
+
   return {
     playerResults,
     teamResults,
@@ -52,5 +58,6 @@ export const useFilterSearch = () => {
     fetchPreviousPageOfPlayersFilter: previousPage,
     isAtStartFilter: bounds.start == 0,
     isAtEndFilter: bounds.end > numPlayers,
+    resetSearchResults
   };
 };
diff --git a/frontend/src/pages/MatchHistory.tsx b/frontend/src/pages/MatchHistory.tsx
new file mode 100644
index 0000000..7898862
--- /dev/null
+++ b/frontend/src/pages/MatchHistory.tsx
@@ -0,0 +1,335 @@
+import {
+  Box,
+  Button,
+  Center,
+  Divider,
+  FormControl,
+  FormLabel,
+  HStack,
+  Heading,
+  Input,
+  Modal,
+  ModalBody,
+  ModalCloseButton,
+  ModalContent,
+  ModalFooter,
+  ModalHeader,
+  ModalOverlay,
+  Table,
+  TableContainer,
+  Tbody,
+  Td,
+  Th,
+  Thead,
+  Tr,
+  useDisclosure,
+} from "@chakra-ui/react";
+import Navbar from "../components/Navbar";
+import { useEffect, useState } from "react";
+import { PlusSquareIcon } from "@chakra-ui/icons";
+import { useFilterSearch } from "../hooks/useFilterSearch";
+import { Match, OverallMatchHistory, TeamExtendedInfo } from "../types/types";
+import { debounce } from "lodash";
+import { fetchLastFiveMatches, fetchOverallMatchHistory } from "../util/API";
+
+const MatchHistory: React.FC = () => {
+  const [teamOne, setTeamOne] = useState<TeamExtendedInfo | null>(null);
+  const [teamTwo, setTeamTwo] = useState<TeamExtendedInfo | null>(null);
+  const [overallMatchHistory, setOverallMatchHistory] =
+    useState<OverallMatchHistory | null>(null);
+  const [lastFiveMatches, setLastFiveMatches] = useState<Match[] | null>(null);
+  const { isOpen, onClose, onOpen } = useDisclosure();
+  const {
+    isOpen: isOpen2,
+    onClose: onClose2,
+    onOpen: onOpen2,
+  } = useDisclosure();
+
+  const emptyList: TeamExtendedInfo[] = [];
+
+  const closeAndReset = () => {
+    resetSearchResults();
+    onClose();
+  };
+
+  const close2AndReset = () => {
+    resetSearchResults();
+    onClose2();
+  };
+
+  useEffect(() => {
+    getOverallMatchHistory();
+    getLastFiveMatches();
+  }, [teamOne]);
+
+  useEffect(() => {
+    getOverallMatchHistory();
+    getLastFiveMatches();
+  }, [teamTwo]);
+
+  const getOverallMatchHistory = async () => {
+    if (teamOne && teamTwo) {
+      const res = await fetchOverallMatchHistory(
+        teamOne.team_id,
+        teamTwo.team_id
+      );
+      setOverallMatchHistory(res);
+    }
+  };
+
+  const getLastFiveMatches = async () => {
+    if (teamOne && teamTwo) {
+      const res = await fetchLastFiveMatches(teamOne.team_id, teamTwo.team_id);
+      setLastFiveMatches(res);
+    }
+  };
+
+  interface IFilters {
+    team: string;
+    league: string;
+    playerName: string;
+    rating: boolean;
+    speed: boolean;
+    age: boolean;
+  }
+
+  const filters: IFilters = {
+    team: "",
+    league: "",
+    playerName: "",
+    rating: false,
+    speed: false,
+    age: false,
+  };
+
+  const {
+    teamResults: teamResults,
+    filterSearch: playerFilterSearch,
+    resetSearchResults,
+  } = useFilterSearch();
+
+  const [switcher, userSwitcher] = useState(false);
+
+  const handleFilterSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
+    filters.team = e.target.value;
+    if (e.target.value == "") {
+      userSwitcher(false);
+    } else {
+      userSwitcher(true);
+      debouncedUpdateFilter();
+    }
+  };
+
+  const debouncedUpdateFilter = debounce(() => {
+    playerFilterSearch(
+      filters.team,
+      filters.league,
+      filters.playerName,
+      filters.rating,
+      filters.speed,
+      filters.age
+    );
+  }, 500);
+
+  return (
+    <>
+      <Navbar />
+      <Center minHeight="100vh" minWidth="100%" bg="gray.200">
+        <Box
+          minWidth="300px"
+          width="2000px"
+          bg="white"
+          rounded="2xl"
+          m={20}
+          p={16}
+        >
+          <Modal isOpen={isOpen} onClose={closeAndReset}>
+            <ModalOverlay />
+            <ModalContent>
+              <ModalHeader>Select Team 1</ModalHeader>
+              <ModalCloseButton />
+              <ModalBody>
+                <FormControl>
+                  <FormLabel>Search by team name</FormLabel>
+                  <Input type="text" onChange={handleFilterSearch} />
+                </FormControl>
+                {(switcher ? teamResults : emptyList)
+                  ?.filter((item) =>
+                    teamTwo ? teamTwo.team_id != item.team_id : true
+                  )
+                  .slice(0, 10)
+                  .map((team) => {
+                    return (
+                      <Button
+                        key={team.team_id}
+                        mr={2}
+                        mt={2}
+                        variant={
+                          teamOne?.team_id == teamOne?.team_id
+                            ? "solid"
+                            : "outline"
+                        }
+                        onClick={() => {
+                          setTeamOne(team);
+                        }}
+                      >
+                        {team.team_long_name}
+                      </Button>
+                    );
+                  })}
+              </ModalBody>
+              <ModalFooter>
+                <Button
+                  colorScheme="blue"
+                  mr={3}
+                  onClick={() => closeAndReset()}
+                >
+                  Confirm
+                </Button>
+                <Button
+                  colorScheme="red"
+                  onClick={() => {
+                    closeAndReset();
+                    setTeamOne(null);
+                  }}
+                >
+                  Cancel
+                </Button>
+              </ModalFooter>
+            </ModalContent>
+          </Modal>
+
+          <Modal isOpen={isOpen2} onClose={close2AndReset}>
+            <ModalOverlay />
+            <ModalContent>
+              <ModalHeader>Select Team 2</ModalHeader>
+              <ModalCloseButton />
+              <ModalBody>
+                <FormControl>
+                  <FormLabel>Search by team name</FormLabel>
+                  <Input type="text" onChange={handleFilterSearch} />
+                </FormControl>
+                {(switcher ? teamResults : emptyList)
+                  .filter((item) =>
+                    teamOne ? teamOne.team_id != item.team_id : true
+                  )
+                  .slice(0, 10)
+                  .map((team) => {
+                    return (
+                      <Button
+                        key={team.team_id}
+                        mr={2}
+                        mt={2}
+                        variant={
+                          teamOne?.team_id == teamOne?.team_id
+                            ? "solid"
+                            : "outline"
+                        }
+                        onClick={() => {
+                          setTeamTwo(team);
+                        }}
+                      >
+                        {team.team_long_name}
+                      </Button>
+                    );
+                  })}
+              </ModalBody>
+              <ModalFooter>
+                <Button
+                  colorScheme="blue"
+                  mr={3}
+                  onClick={() => close2AndReset()}
+                >
+                  Confirm
+                </Button>
+                <Button
+                  colorScheme="red"
+                  onClick={() => {
+                    close2AndReset();
+                    setTeamTwo(null);
+                  }}
+                >
+                  Cancel
+                </Button>
+              </ModalFooter>
+            </ModalContent>
+          </Modal>
+          <Heading size="3xl" textAlign={"center"} mb={5}>
+            Match History
+          </Heading>
+          <Divider />
+          <Center mt={4}>
+            <HStack gap={10}>
+              <Button p={10} leftIcon={<PlusSquareIcon />} onClick={onOpen}>
+                {teamOne ? teamOne.team_short_name : "Choose team 1"}
+              </Button>
+              <Button p={10} leftIcon={<PlusSquareIcon />} onClick={onOpen2}>
+                {teamTwo ? teamTwo.team_short_name : "Choose team 2"}
+              </Button>
+            </HStack>
+          </Center>
+          <Heading size="1xl" textAlign={"left"} mb={5} paddingTop={10}>
+            Aggregate Match History
+          </Heading>
+          <TableContainer width="100%">
+            <Table variant="simple">
+              <Thead>
+                <Tr>
+                  <Th>
+                    {teamOne?.team_long_name
+                      ? teamOne?.team_long_name + " wins"
+                      : "Team 1 Wins"}
+                  </Th>
+                  <Th>
+                    {teamTwo?.team_long_name
+                      ? teamTwo?.team_long_name + " wins"
+                      : "Team 2 Wins"}
+                  </Th>
+                  <Th>Ties</Th>
+                </Tr>
+              </Thead>
+              <Tbody>
+                <Tr>
+                  <Td>{overallMatchHistory?.numTeam1Win}</Td>
+                  <Td>{overallMatchHistory?.numTeam2Win}</Td>
+                  <Td>{overallMatchHistory?.numTeam2Win}</Td>
+                </Tr>
+              </Tbody>
+              <Heading size="1xl" textAlign={"left"} mb={5} paddingTop={10}>
+                Last 5 Matches
+              </Heading>
+              <Thead>
+                <Tr>
+                  <Th>Match Season</Th>
+                  <Th>
+                    {teamOne?.team_long_name
+                      ? teamOne?.team_long_name + " Score"
+                      : "Team 1 Score"}
+                  </Th>
+                  <Th>
+                    {teamTwo?.team_long_name
+                      ? teamTwo?.team_long_name + " Score"
+                      : "Team 2 Score"}
+                  </Th>
+                </Tr>
+              </Thead>
+              <Tbody>
+                {lastFiveMatches?.map((match) => {
+                  return (
+                    <Tr key={match.season}>
+                      <Td>{match.season}</Td>
+                      <Td>{match.team1_score}</Td>
+                      <Td>{match.team2_score}</Td>
+                    </Tr>
+                  );
+                })}
+              </Tbody>
+            </Table>
+          </TableContainer>
+        </Box>
+      </Center>
+    </>
+  );
+};
+
+export default MatchHistory;
diff --git a/frontend/src/types/types.ts b/frontend/src/types/types.ts
index 6c3990c..702b4a0 100644
--- a/frontend/src/types/types.ts
+++ b/frontend/src/types/types.ts
@@ -99,3 +99,17 @@ export type LeagueInfo = {
   league_id: number; 
   league_name: string;
 }
+
+export type OverallMatchHistory = {
+  numTeam1Win: number, 
+  numTeam2Win: number, 
+  numTies: number
+}
+
+export type Match = {
+  season: string,
+  team1_id: number,
+  team2_id: number,
+  team1_score: number,
+  team2_score: number
+}
diff --git a/frontend/src/util/API.ts b/frontend/src/util/API.ts
index 4300ab7..e592aef 100644
--- a/frontend/src/util/API.ts
+++ b/frontend/src/util/API.ts
@@ -1,5 +1,5 @@
 import { API_URL, PlayerPositions } from "./CONSTANTS";
-import { ExtendedPlayer, UserTeam } from "../types/types";
+import { ExtendedPlayer, Match, OverallMatchHistory, UserTeam } from "../types/types";
 import { User } from "../contexts/userContext";
 
 export const createNewTeam = async (
@@ -198,6 +198,44 @@ export const predictWinner = async (
   }
 };
 
+export const fetchOverallMatchHistory = async (
+  team1Id: number,
+  team2Id: number
+): Promise<OverallMatchHistory | null> => {
+  try {
+    const url = `${API_URL}/overall_match_history/${team1Id}/${team2Id}`;
+    const res = await fetch(url);
+    const data = await res.json();
+    if (res.status == 200 && data[0]) {
+      return data[0];
+    } else {
+      return null;
+    }
+  } catch (e) {
+    console.error(e);
+    return null;
+  }
+};
+
+export const fetchLastFiveMatches = async (
+  team1Id: number,
+  team2Id: number
+): Promise<Match[]> => {
+  try {
+    const url = `${API_URL}/last_five_matches/${team1Id}/${team2Id}`;
+    const res = await fetch(url);
+    const data = await res.json();
+    if (res.status == 200) {
+      return data;
+    } else {
+      return [];
+    }
+  } catch (e) {
+    console.error(e);
+    return [];
+  }
+};
+
 export const getUserTeams = async (
   userId: number
 ): Promise<{ teamId: number; teamName: string; icon: string}[]> => {
diff --git a/sample-sql/feature-11a-sample-input-2.out b/sample-sql/feature-11a-sample-input-2.out
index 6ff17ba..5d3306c 100644
--- a/sample-sql/feature-11a-sample-input-2.out
+++ b/sample-sql/feature-11a-sample-input-2.out
@@ -1,9 +1,9 @@
-+----------+--------------+--------------+-----------+-----------------+-----------------+
-| match_id | home_team_id | away_team_id | season    | home_team_score | away_team_score |
-+----------+--------------+--------------+-----------+-----------------+-----------------+
-|     1597 |           14 |           12 | 2015/2016 |               1 |               4 |
-|     1681 |           12 |           14 | 2015/2016 |               2 |               1 |
-|     1390 |           14 |           12 | 2014/2015 |               2 |               0 |
-|     1473 |           12 |           14 | 2014/2015 |               5 |               0 |
-|     1109 |           12 |           14 | 2012/2013 |               0 |               0 |
-+----------+--------------+--------------+-----------+-----------------+-----------------+
++----------+----------+-------------+-------------+-----------+
+| team1_id | team2_id | team1_score | team2_score | season    |
++----------+----------+-------------+-------------+-----------+
+|       12 |       14 |           4 |           1 | 2015/2016 |
+|       12 |       14 |           2 |           1 | 2015/2016 |
+|       12 |       14 |           0 |           2 | 2014/2015 |
+|       12 |       14 |           5 |           0 | 2014/2015 |
+|       12 |       14 |           0 |           0 | 2012/2013 |
++----------+----------+-------------+-------------+-----------+
diff --git a/sample-sql/feature-11a-sample-input-2.sql b/sample-sql/feature-11a-sample-input-2.sql
index 0e9139e..524dfff 100644
--- a/sample-sql/feature-11a-sample-input-2.sql
+++ b/sample-sql/feature-11a-sample-input-2.sql
@@ -1,6 +1,13 @@
-SELECT * 
-FROM footyfiend.MatchesPlayed NATURAL JOIN footyfiend.Matches 
-WHERE (home_team_id = 12 AND away_team_id = 14) 
-      OR (home_team_id = 14 AND away_team_id = 12)  
-ORDER BY season DESC
+SELECT *
+FROM (
+      SELECT home_team_id as team1_id, away_team_id as team2_id, home_team_score AS team1_score, away_team_score AS team2_score, season
+      FROM footyfiend.MatchesPlayed NATURAL JOIN footyfiend.Matches
+      WHERE (home_team_id = 12 AND away_team_id = 14)
+      UNION ALL
+      SELECT away_team_id as team1_id, home_team_id as team2_id, away_team_score AS team1_score, home_team_score AS team2_score, season
+      FROM footyfiend.MatchesPlayed NATURAL JOIN footyfiend.Matches
+      WHERE (home_team_id = 14 AND away_team_id = 12)
+      ) AS T
+ORDER BY SEASON DESC
 LIMIT 5;
+
